---
title: "数据结构"
format: html
editor: visual
---

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

## 1. 向量 (一维数组)

### 1. 数值向量

-   数值向量就是数值组成的向量, 单个数值是长度为1的数值向量

```{r}
x = 1.5
x

numeric(10) # 长度为10的全0向量
```

-   函数 `c()` 实现将多个对象合并到一起

```{r}
c(1, 2, 3, 4, 5)

c(1, 2, c(3, 4, 5)) # 将多个数值向量合并成一个数值向量
```

-   创建等差的数值向量

```{r}
1:5 # 同 seq(5) 或 seq(1, 5)

seq(1, 10, 2) # 从 1 开始到 10 结束, 步长为 2

seq(3, length.out = 10)

```

-   创建重复的数值向量

```{r}
x = 1:3
rep(x, 2)
rep(x, each = 2)
rep(x, c(2, 1, 2)) # 按照规则重复序列中的各元素
rep(x, each = 2, length.out = 4)
rep(x, times = 3, each = 2)
```

-   向量可以做 `+` `-` `*` `/` 运算, 就是正常的向量化运算

> R 中两个不同长度的向量运算, 短的会自动循环补齐以配合长的

```{r}
#| echo: false
2:3
2:3 + 1:5
```

### 2. 逻辑向量

-   向量做逻辑运算, 得到的结果是逻辑向量

```{r}
c(1, 2) > c(2, 1) # 等价于 c(1 > 2, 2 > 1)
c(2, 3) > c(1, 2, -1, 3) # 等价于 c(2 > 1, 3 > 2, 2 > -1, 3 > 3)
```

-   元素属于运算符 `%in%` : 判断元素是否属于集合

```{r}
c(1, 4) %in% c(1, 2, 3) # 左边向量每一个元素是否属于右边集合
```

### 3. 字符向量

-   字符(串)向量, 是一组字符串组成的向量, 单引号和双引号都可以用来生成字符串, 和python一样

```{r}
"hello, world!"
c("Hello", "World")
c("Hello", "World") == "Hello, World"
```

-   单引号和双引号的混合使用规则和python类似

```{r}
'Is "You" a Chinese name?'
```

-   `writeLines()` 函数输出纯字符串内容

```{r}
writeLines("Is \"You\" a Chinese name?")
```

### 4. 访问向量子集

访问向量的一些特定元素或者某个子集, **R的索引是从1开始的**

-   使用元素的位置来访问:

```{r}
v1 = c(1, 2, 3, 4)
v1[2] # 第 2 个元素
v1[2:4] # 第 2-4 个元素
v1[-3] # 除了第 3 个之外的元素
v1[3:6] # 可以访问不存在的位置, 返回 `NA`
```

-   位置向量作为索引, 注意不能又放正数又放负数

```{r}
v1[c(1, 3)]
v1[c(1, 2, -3)] # 报错
```

-   使用逻辑向量来访问, 输入向量相同长度的逻辑向量, 以此决定每一个元素是否要被获取

```{r}
v1[c(TRUE, FALSE, TRUE, FALSE)]
```

-   这里引申为 "根据条件访问向量子集"

```{r}
v1[v1 <= 2] # 同 v1[which(v1 <= 2)] or subset(v1, v1 <= 2)
v1[v1 ^ 2 - v1 >= 2]
which.max(v1) # 返回向量 v1 的最大值的索引
which.min(v1) # 返回向量 v1 的最小值的索引
```

### 5. 对向量子集赋值

-   对向量子集赋值, 就是先访问到向量子集, 再赋值

```{r}
v1[2] = 0
v1[2:4] = c(0, 1, 3)
v1[c(TRUE, FALSE, TRUE, FALSE)] = c(3, 2)
v1[v1 <= 2] = 0
v1[10] = 8 # 不存在的位置赋值, 会用 `NA` 补齐其他位置
v1
```

### 6. 对向量元素命名

-   再创建向量的同时对每个元素命名

```{r}
x = c(a = 1, b = 2, c = 3)
x
```

-   命名后, 可以通过名字来访问向量元素

```{r}
x[c("a", "c")]
x[c("a", "a", "c")]
x["d"] # 访问不存在的名字
```

-   访问或修改向量名字

```{r}
names(x) # 获取向量元素的名字
names(x) = c("x", "y", "z") # 更改向量元素的名字
names(x) = NULL # 移除向量元素的名字
```

### 区分 `[]` 与 `[[]]`

`[]` 提取对象的子集

`[[]]` 提取对象内的元素

-   对于未命名向量, `[]` 和 `[[]]` 结果相同, 命名向量就有区别

```{r}
x = c(a = 1, b = 2, c = 3)
x["a"] # 取出a这个子集
x[["a"]]# 取出a这个元素
```

**`[[]]` 只能放1个, 不能放多个索引或者负索引或者不存在的索引**

### 7. 对向量排序

-   `sort()` 对向量排序, 默认 `decreasing = FALSE` 表示升序

-   `order()` 返回元素排序好的索引, 用这个结果作为索引访问元素, 刚好是排序的向量

-   `rank()` 返回向量中各个元素的排名, 参数 `method` 设置相同值的处理方法

-   `rev()` 将向量进行反转

```{r}
x = c(1, 5, 8, 2, 9, 7, 4)
sort(x)
order(x) # 默认升序, 返回索引位置
x[order(x)] # 就是sort(x)
rank(x) # 默认升序, 返回元素排名
```

## 2. 矩阵 (二维数组)

### 1. 创建矩阵

-   `matrix()` 将一个向量创建为矩阵

`matrix(x, nrow, ncol, byrow, dimnames, …)`

```{r}
matrix(c(1, 2, 3,
         4, 5, 6,
         7, 8, 9), nrow = 3, byrow = FALSE)

matrix(c(1, 2, 3,
         4, 5, 6,
         7, 8, 9), nrow = 3, byrow = TRUE)
```

-   对矩阵的行列命名

```{r}
matrix(1:9, nrow = 3, byrow = TRUE,
       dimnames = list(c("r1","r2","r3"), c("c1","c2","c3")))
```

-   创建后再命名

```{r}
m1 = matrix(c(1,2,3,4,5,6,7,8,9), ncol = 3)
rownames(m1) = c("r1", "r2", "r3")
colnames(m1) = c("c1", "c2", "c3")
```

-   对角矩阵

```{r}
diag(1:4, nrow = 4)
```

### 2. 访问矩阵子集

```{r}
m1[1,2] # 提取第1行, 第2列的单个元素
m1[1:2, 2:3] # 第1-2行, 2-3列
m1[c("r1","r3"), c("c1", "c3")]
```

-   若一个维度空缺, 则选出该维度的所有元素

```{r}
m1[1,] # 提取第1行
m1[, 2:3] # 所有行, 第2-3列的元素
m1[-1,] # 提取除了第1行之外的元素
m1[,-c(2,4)] # 提取除了第2行和第4列之外的

```

```{r}
m1[3:7] # 本质上仍然是个向量
```

-   若输入一个不等式, 则返回同样大小的逻辑矩阵

```{r}
m1 > 3
m1[m1 > 3]
```

### 3. 矩阵运算

-   `A+B`, `A-B`, `A*B`, `A/B`: 矩阵四则运算, 要求矩阵同型

-   `A %*% B` : 矩阵乘法, 要求 **A的列数 = B的行数**

## 3. 多维数组

### 1. 创建多维数组

-   `array()`将一个向量创建为多维数组

`array(x, dim, dimnames, …)`

```{r}
a1 = array(1:24, dim = c(3,4,2))
a1
```

-   在创建数组时对每个维度进行命名:

```{r}
a1 = array(1:24, dim = c(3, 4, 2),
           dimnames = list(c("r1","r2","r3"),
                           c("c1","c2","c3","c4"),
                           c("k1","k2")))
a1
```

-   创建之后再命名

```{r}
a1 = array(1:24, dim = c(3, 4, 2))
dimnames(a1) = list(c("r1","r2","r3"),
                           c("c1","c2","c3","c4"),
                           c("k1","k2"))
a1
```

### 2. 访问多维数组子集

我们可以把第3个维度称为`页`

```{r}
a1[2,4,2] # 提取第2行, 第4列, 第2页的元素
a1["r2","c4","k2"] # 提取第r2行, 第c4列, 第2页的元素
a1[1, 2:4,1:2] # 提取第1行, 第2-4列, 第1-2页
a1[,,2] # 提取第2页的所有元素
dim(a1) # 返回多维数组 a1 的各维度的数组
```

## 4. 列表 (list)

可以包含不同类型的对象, 甚至可以包括其他列表

### 4.1 创建列表

-   用`list()` 将多个不同类型的对象创建为列表

```{r}
l0 = list(1, c(TRUE, FALSE), c("a","b","c"))
l0
```

-   在创建列表, 为列表的每个成分指定名字

```{r}
l1 = list(A = 1, B = c(TRUE, FALSE), C = c("a","b","c"))
l1
```

-   创建列表后再对列表成分命名或修改名字

```{r}
names(l1) = NULL # 移除列表成分的名字
names(l1) = c("x","y","z")
```

### 2. 从列表中提取成分的内容

-   最常用的方法是用 `$` , 通过成分名字来提取该成本下的内容:

```{r}
l1$y
l1$m # 访问不存在的成分 m, 将会返回 NULL
```

-   用`[[n]]` 来提取列表n个成分的内容, `n` 也可以换成成分的名字

```{r}
l1[[2]]
```

### 3. 提取列表子集

-   用`[]`, 可以去除列表中的一些成分, 作为一个新的(子)列表

-   用`[]` 可以指定字符向量表示成分名字, 用数值向量表示成分位置, 或用逻辑向量指定是否选择, 来去除列表成分

```{r}
l1["x"] # 同 l1[1]
l1[c("x","z")] # 同l1[c(1,3)], l1[c(TRUE, FALSE, TRUE)]
```

### 4. 对列表成分赋值

-   先访问(提取)到列表的成分, 再赋值

```{r}
l1$x = 0 # 将列表的x赋值为0
```

-   同时给多个列表成分赋值

```{r}
l1[c("x","y")] = list(x = "new value for y", y = c(3, 1))
```

-   移除列表中的值, 赋值为 `NULL`

```{r}
l1[c("z", "m")] = NULL
```

### 5. 列表函数

-   `as.list()` 将向量转换成列表

```{r}
l2 = as.list(c(a = 1, b = 2))
l2
```

-   `unlist()` 将一个列表打破成分界线, 转换成一个向量

```{r}
unlist(l2)
```

> TODO: `tidyverse` 的 `purrr` 有更好的包

## 5. 数据框 (数据表)

数据框就是个列表, 它的每个成分都是一个向量, 并且长度相同, 表格形式展示

### 1. 创建数据框

-   用`tibble` 根据若干向量创建 `tibble`

```{r}
library(tidyverse)
persons = tibble(
  Name = c("Ken", "Ashely", "Jennifer"),
  Gender = c("Male", "Female", "Female"),
  Age = c(24, 25, 23),
  Major = c("Finance", "Statistics", "Computer Science")
)
persons
```

-   用`tribble` 按照行录入数据创建 `tibble` :

```{r}
tribble(
  ~Name, ~Gender, ~Age, ~Major,
  "Ken", "Male", 24, "Finance",
  "Ashley", "Female", 25, "Statistics",
  "Jennfier", "Female", 23, "Computer Sicence"
)
```

-   对数据框的各列重命名

```{r}
df = tibble(id = 1:4,
            level = c(0, 2, 1, -1),
            score = c(0.5, 0.2, 0.1, 0.5))
names(df) = c("id", "x", "y")
df
```

### 2. 提取数据框的元素, 子集
